function K16Video()
{
   this.frameBuffer = new Uint16Array(30 * 40);
   for (var i = 0; i < 128; i++)
   {
      this.frameBuffer[i] = i + 0x0C00;
   }
   this.frameBuffer[129] = 0x8001;
   this.frameBuffer[130] = 0x8002;
   this.frameBuffer[131] = 0x8003;
   this.frameBuffer[132] = 0x8004;
   this.frameBuffer[133] = 0x8005;
   this.frameBuffer[134] = 0x8006;
   this.frameBuffer[135] = 0x8007;
   this.frameBuffer[136] = 0x8008;
   this.frameBuffer[137] = 0x8009;
   this.frameBuffer[138] = 0x800A;
   this.frameBuffer[139] = 0x888F;

   this.charRom = [];
   this.charRom[0] = [ 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 ]; // ASCII   0
   this.charRom[1] = [ 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03 ]; // ASCII   1
   this.charRom[2] = [ 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07 ]; // ASCII   2
   this.charRom[3] = [ 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F ]; // ASCII   3
   this.charRom[4] = [ 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F ]; // ASCII   4
   this.charRom[5] = [ 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F ]; // ASCII   5
   this.charRom[6] = [ 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F ]; // ASCII   6
   this.charRom[7] = [ 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ]; // ASCII   7
   this.charRom[8] = [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF ]; // ASCII   8
   this.charRom[9] = [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF ]; // ASCII   9
   this.charRom[10] = [ 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF ]; // ASCII  10
   this.charRom[11] = [ 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF ]; // ASCII  11
   this.charRom[12] = [ 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ]; // ASCII  12
   this.charRom[13] = [ 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ]; // ASCII  13
   this.charRom[14] = [ 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ]; // ASCII  14
   this.charRom[15] = [ 0x00, 0x06, 0x0C, 0x1F, 0x1F, 0x0C, 0x06, 0x00 ]; // ASCII  15
   this.charRom[16] = [ 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18 ]; // ASCII  16
   this.charRom[17] = [ 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00 ]; // ASCII  17
   this.charRom[18] = [ 0x18, 0x18, 0x18, 0xFF, 0xFF, 0x18, 0x18, 0x18 ]; // ASCII  18
   this.charRom[19] = [ 0x18, 0x18, 0x18, 0xFF, 0xFF, 0x00, 0x00, 0x00 ]; // ASCII  19
   this.charRom[20] = [ 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x18, 0x18, 0x18 ]; // ASCII  20
   this.charRom[21] = [ 0x18, 0x18, 0x18, 0xF8, 0xF8, 0x18, 0x18, 0x18 ]; // ASCII  21
   this.charRom[22] = [ 0x18, 0x18, 0x18, 0x1F, 0x1F, 0x18, 0x18, 0x18 ]; // ASCII  22
   this.charRom[23] = [ 0x18, 0x18, 0x18, 0xF8, 0xF8, 0x00, 0x00, 0x00 ]; // ASCII  23
   this.charRom[24] = [ 0x00, 0x00, 0x00, 0xF8, 0xF8, 0x18, 0x18, 0x18 ]; // ASCII  24
   this.charRom[25] = [ 0x18, 0x18, 0x18, 0x1F, 0x1F, 0x00, 0x00, 0x00 ]; // ASCII  25
   this.charRom[26] = [ 0x00, 0x00, 0x00, 0x1F, 0x1F, 0x18, 0x18, 0x18 ]; // ASCII  26
   this.charRom[27] = [ 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00 ]; // ASCII  27
   this.charRom[28] = [ 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18 ]; // ASCII  28
   this.charRom[29] = [ 0x00, 0x00, 0x00, 0xF8, 0xF8, 0x00, 0x00, 0x00 ]; // ASCII  29
   this.charRom[30] = [ 0x00, 0x00, 0x00, 0x1F, 0x1F, 0x00, 0x00, 0x00 ]; // ASCII  30
   this.charRom[31] = [ 0x00, 0x60, 0x30, 0xF8, 0xF8, 0x30, 0x60, 0x00 ]; // ASCII  31
   this.charRom[32] = [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ]; // ASCII  32 ( )
   this.charRom[33] = [ 0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00 ]; // ASCII  33 (!)
   this.charRom[34] = [ 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ]; // ASCII  34 (")
   this.charRom[35] = [ 0x36, 0x36, 0x7F, 0x36, 0x7F, 0x36, 0x36, 0x00 ]; // ASCII  35 (#)
   this.charRom[36] = [ 0x0C, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x0C, 0x00 ]; // ASCII  36 ($)
   this.charRom[37] = [ 0x00, 0x63, 0x33, 0x18, 0x0C, 0x66, 0x63, 0x00 ]; // ASCII  37 (%)
   this.charRom[38] = [ 0x1C, 0x36, 0x1C, 0x6E, 0x3B, 0x33, 0x6E, 0x00 ]; // ASCII  38 (&)
   this.charRom[39] = [ 0x06, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00 ]; // ASCII  39 (')
   this.charRom[40] = [ 0x18, 0x0C, 0x06, 0x06, 0x06, 0x0C, 0x18, 0x00 ]; // ASCII  40 (()
   this.charRom[41] = [ 0x06, 0x0C, 0x18, 0x18, 0x18, 0x0C, 0x06, 0x00 ]; // ASCII  41 ())
   this.charRom[42] = [ 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00 ]; // ASCII  42 (*)
   this.charRom[43] = [ 0x00, 0x0C, 0x0C, 0x3F, 0x0C, 0x0C, 0x00, 0x00 ]; // ASCII  43 (+)
   this.charRom[44] = [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x06 ]; // ASCII  44 (,)
   this.charRom[45] = [ 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00 ]; // ASCII  45 (-)
   this.charRom[46] = [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00 ]; // ASCII  46 (.)
   this.charRom[47] = [ 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00 ]; // ASCII  47 (/)
   this.charRom[48] = [ 0x3E, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x3E, 0x00 ]; // ASCII  48 (0)
   this.charRom[49] = [ 0x0C, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x3F, 0x00 ]; // ASCII  49 (1)
   this.charRom[50] = [ 0x1E, 0x33, 0x30, 0x1C, 0x06, 0x33, 0x3F, 0x00 ]; // ASCII  50 (2)
   this.charRom[51] = [ 0x1E, 0x33, 0x30, 0x1C, 0x30, 0x33, 0x1E, 0x00 ]; // ASCII  51 (3)
   this.charRom[52] = [ 0x38, 0x3C, 0x36, 0x33, 0x7F, 0x30, 0x78, 0x00 ]; // ASCII  52 (4)
   this.charRom[53] = [ 0x3F, 0x03, 0x1F, 0x30, 0x30, 0x33, 0x1E, 0x00 ]; // ASCII  53 (5)
   this.charRom[54] = [ 0x1C, 0x06, 0x03, 0x1F, 0x33, 0x33, 0x1E, 0x00 ]; // ASCII  54 (6)
   this.charRom[55] = [ 0x3F, 0x33, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x00 ]; // ASCII  55 (7)
   this.charRom[56] = [ 0x1E, 0x33, 0x33, 0x1E, 0x33, 0x33, 0x1E, 0x00 ]; // ASCII  56 (8)
   this.charRom[57] = [ 0x1E, 0x33, 0x33, 0x3E, 0x30, 0x18, 0x0E, 0x00 ]; // ASCII  57 (9)
   this.charRom[58] = [ 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x00 ]; // ASCII  58 (:)
   this.charRom[59] = [ 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x06 ]; // ASCII  59 (;)
   this.charRom[60] = [ 0x18, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x18, 0x00 ]; // ASCII  60 (<)
   this.charRom[61] = [ 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x00 ]; // ASCII  61 (=)
   this.charRom[62] = [ 0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00 ]; // ASCII  62 (>)
   this.charRom[63] = [ 0x1E, 0x33, 0x30, 0x18, 0x0C, 0x00, 0x0C, 0x00 ]; // ASCII  63 (?)
   this.charRom[64] = [ 0x3E, 0x63, 0x7B, 0x7B, 0x7B, 0x03, 0x1E, 0x00 ]; // ASCII  64 (@)
   this.charRom[65] = [ 0x0C, 0x1E, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x00 ]; // ASCII  65 (A)
   this.charRom[66] = [ 0x3F, 0x66, 0x66, 0x3E, 0x66, 0x66, 0x3F, 0x00 ]; // ASCII  66 (B)
   this.charRom[67] = [ 0x3C, 0x66, 0x03, 0x03, 0x03, 0x66, 0x3C, 0x00 ]; // ASCII  67 (C)
   this.charRom[68] = [ 0x1F, 0x36, 0x66, 0x66, 0x66, 0x36, 0x1F, 0x00 ]; // ASCII  68 (D)
   this.charRom[69] = [ 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x46, 0x7F, 0x00 ]; // ASCII  69 (E)
   this.charRom[70] = [ 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x06, 0x0F, 0x00 ]; // ASCII  70 (F)
   this.charRom[71] = [ 0x3C, 0x66, 0x03, 0x03, 0x73, 0x66, 0x7C, 0x00 ]; // ASCII  71 (G)
   this.charRom[72] = [ 0x33, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x33, 0x00 ]; // ASCII  72 (H)
   this.charRom[73] = [ 0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00 ]; // ASCII  73 (I)
   this.charRom[74] = [ 0x78, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E, 0x00 ]; // ASCII  74 (J)
   this.charRom[75] = [ 0x67, 0x66, 0x36, 0x1E, 0x36, 0x66, 0x67, 0x00 ]; // ASCII  75 (K)
   this.charRom[76] = [ 0x0F, 0x06, 0x06, 0x06, 0x46, 0x66, 0x7F, 0x00 ]; // ASCII  76 (L)
   this.charRom[77] = [ 0x63, 0x77, 0x7F, 0x7F, 0x6B, 0x63, 0x63, 0x00 ]; // ASCII  77 (M)
   this.charRom[78] = [ 0x63, 0x67, 0x6F, 0x7B, 0x73, 0x63, 0x63, 0x00 ]; // ASCII  78 (N)
   this.charRom[79] = [ 0x1C, 0x36, 0x63, 0x63, 0x63, 0x36, 0x1C, 0x00 ]; // ASCII  79 (O)
   this.charRom[80] = [ 0x3F, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x0F, 0x00 ]; // ASCII  80 (P)
   this.charRom[81] = [ 0x1E, 0x33, 0x33, 0x33, 0x3B, 0x1E, 0x38, 0x00 ]; // ASCII  81 (Q)
   this.charRom[82] = [ 0x3F, 0x66, 0x66, 0x3E, 0x36, 0x66, 0x67, 0x00 ]; // ASCII  82 (R)
   this.charRom[83] = [ 0x1E, 0x33, 0x07, 0x0E, 0x38, 0x33, 0x1E, 0x00 ]; // ASCII  83 (S)
   this.charRom[84] = [ 0x3F, 0x2D, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00 ]; // ASCII  84 (T)
   this.charRom[85] = [ 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3F, 0x00 ]; // ASCII  85 (U)
   this.charRom[86] = [ 0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00 ]; // ASCII  86 (V)
   this.charRom[87] = [ 0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00 ]; // ASCII  87 (W)
   this.charRom[88] = [ 0x63, 0x63, 0x36, 0x1C, 0x1C, 0x36, 0x63, 0x00 ]; // ASCII  88 (X)
   this.charRom[89] = [ 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x0C, 0x1E, 0x00 ]; // ASCII  89 (Y)
   this.charRom[90] = [ 0x7F, 0x63, 0x31, 0x18, 0x4C, 0x66, 0x7F, 0x00 ]; // ASCII  90 (Z)
   this.charRom[91] = [ 0x1E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x1E, 0x00 ]; // ASCII  91 ([)
   this.charRom[92] = [ 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x40, 0x00 ]; // ASCII  92 (\)
   this.charRom[93] = [ 0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x00 ]; // ASCII  93 (])
   this.charRom[94] = [ 0x08, 0x1C, 0x36, 0x63, 0x00, 0x00, 0x00, 0x00 ]; // ASCII  94 (^)
   this.charRom[95] = [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF ]; // ASCII  95 (_)
   this.charRom[96] = [ 0x0C, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 ]; // ASCII  96 (`)
   this.charRom[97] = [ 0x00, 0x00, 0x1E, 0x30, 0x3E, 0x33, 0x6E, 0x00 ]; // ASCII  97 (a)
   this.charRom[98] = [ 0x07, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x3B, 0x00 ]; // ASCII  98 (b)
   this.charRom[99] = [ 0x00, 0x00, 0x1E, 0x33, 0x03, 0x33, 0x1E, 0x00 ]; // ASCII  99 (c)
   this.charRom[100] = [ 0x38, 0x30, 0x30, 0x3E, 0x33, 0x33, 0x6E, 0x00 ]; // ASCII 100 (d)
   this.charRom[101] = [ 0x00, 0x00, 0x1E, 0x33, 0x3F, 0x03, 0x1E, 0x00 ]; // ASCII 101 (e)
   this.charRom[102] = [ 0x1C, 0x36, 0x06, 0x0F, 0x06, 0x06, 0x0F, 0x00 ]; // ASCII 102 (f)
   this.charRom[103] = [ 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x1F ]; // ASCII 103 (g)
   this.charRom[104] = [ 0x07, 0x06, 0x36, 0x6E, 0x66, 0x66, 0x67, 0x00 ]; // ASCII 104 (h)
   this.charRom[105] = [ 0x0C, 0x00, 0x0E, 0x0C, 0x0C, 0x0C, 0x1E, 0x00 ]; // ASCII 105 (i)
   this.charRom[106] = [ 0x30, 0x00, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E ]; // ASCII 106 (j)
   this.charRom[107] = [ 0x07, 0x06, 0x66, 0x36, 0x1E, 0x36, 0x67, 0x00 ]; // ASCII 107 (k)
   this.charRom[108] = [ 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00 ]; // ASCII 108 (l)
   this.charRom[109] = [ 0x00, 0x00, 0x33, 0x7F, 0x7F, 0x6B, 0x63, 0x00 ]; // ASCII 109 (m)
   this.charRom[110] = [ 0x00, 0x00, 0x1F, 0x33, 0x33, 0x33, 0x33, 0x00 ]; // ASCII 110 (n)
   this.charRom[111] = [ 0x00, 0x00, 0x1E, 0x33, 0x33, 0x33, 0x1E, 0x00 ]; // ASCII 111 (o)
   this.charRom[112] = [ 0x00, 0x00, 0x3B, 0x66, 0x66, 0x3E, 0x06, 0x0F ]; // ASCII 112 (p)
   this.charRom[113] = [ 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x78 ]; // ASCII 113 (q)
   this.charRom[114] = [ 0x00, 0x00, 0x3B, 0x6E, 0x66, 0x06, 0x0F, 0x00 ]; // ASCII 114 (r)
   this.charRom[115] = [ 0x00, 0x00, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x00 ]; // ASCII 115 (s)
   this.charRom[116] = [ 0x08, 0x0C, 0x3E, 0x0C, 0x0C, 0x2C, 0x18, 0x00 ]; // ASCII 116 (t)
   this.charRom[117] = [ 0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x6E, 0x00 ]; // ASCII 117 (u)
   this.charRom[118] = [ 0x00, 0x00, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00 ]; // ASCII 118 (v)
   this.charRom[119] = [ 0x00, 0x00, 0x63, 0x6B, 0x7F, 0x7F, 0x36, 0x00 ]; // ASCII 119 (w)
   this.charRom[120] = [ 0x00, 0x00, 0x63, 0x36, 0x1C, 0x36, 0x63, 0x00 ]; // ASCII 120 (x)
   this.charRom[121] = [ 0x00, 0x00, 0x33, 0x33, 0x33, 0x3E, 0x30, 0x1F ]; // ASCII 121 (y)
   this.charRom[122] = [ 0x00, 0x00, 0x3F, 0x19, 0x0C, 0x26, 0x3F, 0x00 ]; // ASCII 122 (z)
   this.charRom[123] = [ 0x38, 0x0C, 0x0C, 0x07, 0x0C, 0x0C, 0x38, 0x00 ]; // ASCII 123 ({)
   this.charRom[124] = [ 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00 ]; // ASCII 124 (|)
   this.charRom[125] = [ 0x07, 0x0C, 0x0C, 0x38, 0x0C, 0x0C, 0x07, 0x00 ]; // ASCII 125 (})
   this.charRom[126] = [ 0x6E, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ]; // ASCII 126 (~)
   this.charRom[127] = [ 0xFF, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0xFF ]; // ASCII 127
   
   this.pixelColorMap = [ [ 0x00, 0x00, 0x00, 0xFF],
                          [ 0x00, 0x00, 0xFF, 0xFF],
                          [ 0x00, 0xFF, 0x00, 0xFF],
                          [ 0x00, 0xFF, 0xFF, 0xFF],
                          [ 0xFF, 0x00, 0x00, 0xFF],
                          [ 0xFF, 0x00, 0xFF, 0xFF],
                          [ 0xFF, 0xFF, 0x00, 0xFF],
                          [ 0xFF, 0xFF, 0xFF, 0xFF] ];
}

// ----------------------------------------------------------------------------
    
K16Video.prototype.drawPixel = function (theImageData, index, pixelColor)
{
   var lineLength = 640 * 4;
   var color = this.pixelColorMap[pixelColor];
      
   theImageData[index]                  = color[0];
   theImageData[index + 1]              = color[1];
   theImageData[index + 2]              = color[2];
   theImageData[index + 3]              = color[3];
   theImageData[index + 4]              = color[0];
   theImageData[index + 5]              = color[1];
   theImageData[index + 6]              = color[2];
   theImageData[index + 7]              = color[3];
   theImageData[index + lineLength]     = color[0];
   theImageData[index + lineLength + 1] = color[1];
   theImageData[index + lineLength + 2] = color[2];
   theImageData[index + lineLength + 3] = color[3];
   theImageData[index + lineLength + 4] = color[0];
   theImageData[index + lineLength + 5] = color[1];
   theImageData[index + lineLength + 6] = color[2];
   theImageData[index + lineLength + 7] = color[3];
}

// ----------------------------------------------------------------------------

K16Video.prototype.drawBigPixel = function (theImageData, index, pixelColor)
{
   var lineLength = 640 * 8;
   this.drawPixel(theImageData, index, pixelColor);
   this.drawPixel(theImageData, index + 8, pixelColor);
   this.drawPixel(theImageData, index + 16, pixelColor);
   this.drawPixel(theImageData, index + 24, pixelColor);
   this.drawPixel(theImageData, index + lineLength * 1, pixelColor);
   this.drawPixel(theImageData, index + lineLength * 1 + 8, pixelColor);
   this.drawPixel(theImageData, index + lineLength * 1 + 16, pixelColor);
   this.drawPixel(theImageData, index + lineLength * 1 + 24, pixelColor);
   this.drawPixel(theImageData, index + lineLength * 2, pixelColor);
   this.drawPixel(theImageData, index + lineLength * 2 +8, pixelColor);
   this.drawPixel(theImageData, index + lineLength * 2 + 16, pixelColor);
   this.drawPixel(theImageData, index + lineLength * 2 + 24, pixelColor);
   this.drawPixel(theImageData, index + lineLength * 3, pixelColor);
   this.drawPixel(theImageData, index + lineLength * 3 +8, pixelColor);
   this.drawPixel(theImageData, index + lineLength * 3 + 16, pixelColor);
   this.drawPixel(theImageData, index + lineLength * 3 + 24, pixelColor);   
}

// ----------------------------------------------------------------------------

K16Video.prototype.draw4Pixels = function (theImageData, theCharAndAttr, theScreenIndex)
{
  var lineLength = 640 * 8 * 4;
  var pixel3 = theCharAndAttr & 0x07;
  var index = theScreenIndex * 4;
  this.drawBigPixel(theImageData, index, pixel3);

  var pixel2 = (theCharAndAttr >> 3) & 0x07;
  this.drawBigPixel(theImageData, index + 32, pixel2);

  var pixel1 = (theCharAndAttr >> 6) & 0x07;
  this.drawBigPixel(theImageData, index + lineLength, pixel1);
  
  var pixel0 = (theCharAndAttr >> 9) & 0x07;
  this.drawBigPixel(theImageData, index + lineLength + 32, pixel0);
}

// ----------------------------------------------------------------------------

K16Video.prototype.drawCharacter = function (theImageData, theCharAndAttr, theScreenIndex)
{
   var charPixels =  this.charRom[theCharAndAttr & 0x7F];
   var foreground = (theCharAndAttr >> 8) & 0x07;
   var background = (theCharAndAttr >> 11) & 0x07;
   
   for (var line = 0; line < 8; line++)
   {
      var linePixels = charPixels[line];
      var mask = 0x01;
      for (var column = 0; column < 8; column++)
      {
         var index = (theScreenIndex + column * 2) * 4;
         this.drawPixel(theImageData, index, linePixels & mask ? foreground : background);
         mask <<= 1;
      }
      theScreenIndex += 640 * 2;
   }
}

// ----------------------------------------------------------------------------

K16Video.prototype.draw = function (theCtx, theOffsetX, theOffsetY)
{
/*   var radius = 20;
   theCtx.beginPath();
   theCtx.arc(theOffsetX, theOffsetY, radius, 1 * Math.PI, 1.5 * Math.PI);
   theCtx.lineTo(theOffsetX + 640, theOffsetY - radius);
   theCtx.arc(theOffsetX + 640, theOffsetY, radius, 1.5 * Math.PI, 0 * Math.PI);
   theCtx.lineTo(theOffsetX + 640 + radius, theOffsetY + 480);
   theCtx.arc(theOffsetX + 640, theOffsetY + 480, radius, 0 * Math.PI, 0.5 * Math.PI);
   theCtx.lineTo(theOffsetX, theOffsetY + 480 + radius);
   theCtx.arc(theOffsetX, theOffsetY + 480, radius, 0.5 * Math.PI, 1 * Math.PI);
   theCtx.lineTo(theOffsetX - radius, theOffsetY);
   theCtx.fill();
*/
   var data = theCtx.getImageData(theOffsetX, theOffsetY, 640, 480);
   for (var charIndex = 0; charIndex < 40 * 30; charIndex++)
   {
      var screenPosY = Math.trunc(charIndex / 40) * 8;
      var screenPosX = Math.trunc(charIndex % 40) * 8;
      var screenIndex = (screenPosY * 640 + screenPosX) * 2;
      var charAndAttr = this.frameBuffer[charIndex];
      if (charAndAttr & 0x8000)
      {
         this.draw4Pixels(data.data, charAndAttr, screenIndex);
      }
      else
      {
         this.drawCharacter(data.data, charAndAttr, screenIndex);
      }
   }
	theCtx.putImageData(data, theOffsetX, theOffsetY);
}
